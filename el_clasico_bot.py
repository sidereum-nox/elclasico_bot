from aiogram.fsm.state import State, StatesGroup
import gspread
from aiogram.utils.markdown import hbold
from oauth2client.service_account import ServiceAccountCredentials
from aiogram.types import Message
from aiogram.filters import StateFilter
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext


TOKEN = ""
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
dp["fsm_storage"] = {}




scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)

SHEET_NAME = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ EL CLASICO"
sheet = client.open(SHEET_NAME).worksheet("–æ–±—â–∏–µ –≥—Ä—É–ø–ø—ã")
sheet_clients = client.open(SHEET_NAME).worksheet("–ó–∞—è–≤–∫–∏")
sheet_help = client.open(SHEET_NAME).worksheet("–û–±—Ä–∞—â–µ–Ω–∏–µ")

class RegisterState(StatesGroup):
    branch = State()
    name = State()
    birth_year = State()
    phone = State()

class ScheduleState(StatesGroup):  
    branch = State()

class HelpState(StatesGroup):
        issue = State()
        phone = State()
        name = State()

main_menu = [
        "‚ÑπÔ∏è –ê“õ–ø–∞—Ä–∞—Ç/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "üìÖ –ö–µ—Å—Ç–µ/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        "üìù –ó–∞–ø–∏—Å—å/–¢—ñ—Ä–∫–µ–ª—É",
        "‚ùì –ö”©–º–µ–∫/–ü–æ–º–æ—â—å"
    ]

# –§–∏–ª–∏–∞–ª—ã
branches_list = {
    "70 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –ú–∞–π–∫–∞–π—ã–Ω 1": "70_school",
    "74 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –ñ—É—Ä–≥–µ–Ω–æ–≤–∞ 29": "74_school",
    "10 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –ì–∞–±–¥—É–ª–ª–∏–Ω–∞ 7": "10_school",
    "71 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –û–º–∞—Ä–æ–≤–∞ 4": "71_school",
    "84 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, “∞–ª—ã –¥–∞–ª–∞ 41/1": "84_school",
    "95 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, “∞–ª—ã –¥–∞–ª–∞ 73/1": "95_school",
    "–ë–∏–Ω–æ–º –º–µ–∫—Ç–µ–±—ñ/—à–∫–æ–ª–∞, –ë–∞–π—Ç“±—Ä—Å—ã–Ω–æ–≤–∞ 49–ê": "Binom",
    "2 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –°–µ–π—Ñ—É–ª–ª–∏–Ω–∞ 19": "2_school",
    "44 –º–µ–∫—Ç–µ–ø/—à–∫–æ–ª–∞, –ù“±—Ä–ª—ã –∂–æ–ª 8": "44_school",
}

lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞"), KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")]
    ],
    resize_keyboard=True
)
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=cmd)] for cmd in [
        "‚ÑπÔ∏è –ê“õ–ø–∞—Ä–∞—Ç/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "üìÖ –ö–µ—Å—Ç–µ/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        "üìù –ó–∞–ø–∏—Å—å/–¢—ñ—Ä–∫–µ–ª—É",
        "‚ùì –ö”©–º–µ–∫/–ü–æ–º–æ—â—å"
    ]],
    resize_keyboard=True
)

def get_branches_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=branch)] for branch in branches_list.keys()],
        resize_keyboard=True
    )


user_lang = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=lang_keyboard)

@dp.message(lambda message: message.text in ["üá∞üáø “ö–∞–∑–∞“õ—à–∞", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = "kk" if message.text == "üá∞üáø “ö–∞–∑–∞“õ—à–∞" else "ru"
    await message.answer(
        "üåü –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑." if user_lang[message.from_user.id] == "kk"
        else "üåü –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard
    )


@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ê“õ–ø–∞—Ä–∞—Ç/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def choose_branch_info(message: types.Message):
    lang = user_lang.get(message.from_user.id, "ru")
    text = (
        "‚öΩ *El Clasico* —Ñ—É—Ç–±–æ–ª –º–µ–∫—Ç–µ–±—ñ ‚Äì –±“±–ª –±–∞–ª–∞–ª–∞—Ä —Ñ—É—Ç–±–æ–ª —à–µ–±–µ—Ä–ª—ñ–≥—ñ–Ω –¥–∞–º—ã—Ç–∞—Ç—ã–Ω –æ—Ä—ã–Ω!"
        "üìç –ë—ñ–∑ “õ–∞–ª–∞–Ω—ã“£ –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω–±—ã–∑, –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä –∂–∞–±—ã“õ –∂”ô–Ω–µ –∞—à—ã“õ –∞–ª–∞“£–¥–∞—Ä–¥–∞ ”©—Ç–µ–¥—ñ."
        "üë®‚Äçüè´ –¢”ô–∂—ñ—Ä–∏–±–µ–ª—ñ –∂–∞—Ç—Ç—ã“õ—Ç—ã—Ä—É—à—ã–ª–∞—Ä –º–µ–Ω –∫”ô—Å—ñ–±–∏ –∫”©–∑“õ–∞—Ä–∞—Å."
        "üèüÔ∏è –§–∏–ª–∏–∞–ª–¥–∞—Ä:\n"
        "üìç 70 –º–µ–∫—Ç–µ–ø, –ú–∞–π“õ–∞–π—ã–Ω 1\n"
        "üìç 74 –º–µ–∫—Ç–µ–ø, –ñ“Ø—Ä–≥–µ–Ω–æ–≤–∞ 29\n"
        "üìç 10 –º–µ–∫—Ç–µ–ø, –ì–∞–±–¥—É–ª–ª–∏–Ω–∞ 7\n"
        "üìç 71 –º–µ–∫—Ç–µ–ø, –û–º–∞—Ä–æ–≤–∞ 4\n"
        "üìç ”®–∑–µ–Ω –ê—Ä–µ–Ω–∞, “ö–æ—Ä–¥–∞–π 8–∞\n"
        "üìç –§–∞–≤–æ—Ä–∏—Ç –ê—Ä–µ–Ω–∞, –ê–ª—Ç—ã–±–∞“õ–∞–Ω 14\n"
        "üìç 84 –º–µ–∫—Ç–µ–ø, “∞–ª—ã –¥–∞–ª–∞ 41/1\n"
        "üìç 95 –º–µ–∫—Ç–µ–ø, “∞–ª—ã –¥–∞–ª–∞ 73/1"
        if lang == "kk" else
        "‚öΩ *El Clasico* ‚Äì —ç—Ç–æ —Ñ—É—Ç–±–æ–ª—å–Ω–∞—è —à–∫–æ–ª–∞ –¥–ª—è –¥–µ—Ç–µ–π!"
        "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö."
        "üë®‚Äçüè´ –û–ø—ã—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
           "–§–∏–ª–∏–∞–ª—ã: —à–∫–æ–ª–∞ ‚Ññ70, ‚Ññ74, ‚Ññ10, ‚Ññ71, –û–∑–µ–Ω –ê—Ä–µ–Ω–∞, –§–∞–≤–æ—Ä–∏—Ç –ê—Ä–µ–Ω–∞, —à–∫–æ–ª–∞ ‚Ññ84, ‚Ññ95, –ë–∏–Ω–æ–º, —à–∫–æ–ª–∞ ‚Ññ2, —à–∫–æ–ª–∞ ‚Ññ44."
        )
    await message.answer(text, parse_mode="Markdown")
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_keyboard)


@dp.message(lambda message: message.text == "üìÖ –ö–µ—Å—Ç–µ/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def choose_branch_schedule(message: types.Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")
    await message.answer(
        "üìç –§–∏–ª–∏–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:" if lang == "kk" else "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=get_branches_keyboard()
    )
    await state.set_state(ScheduleState.branch)


@dp.message(ScheduleState.branch)
async def send_schedule(message: types.Message, state: FSMContext):
    branch_name = message.text
    if branch_name not in branches_list:
        await message.answer(
            "‚ö†Ô∏è –¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑." if user_lang.get(message.from_user.id, "ru") == "kk"
            else "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return

    branch_id = branches_list[branch_name]
    data = sheet.get_all_records()
    lang = user_lang.get(message.from_user.id, "ru")

    schedule_text = f"{hbold(f'üìÖ {branch_name} –∫–µ—Å—Ç–µ—Å—ñ:')}\n\n" if lang == "kk" else f"{hbold(f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {branch_name}:')}\n\n"

    for row in data:
        if row.get('–§–∏–ª–∏–∞–ª (–ê–¥—Ä–µ—Å)') == branch_id:
            schedule_text += (
                f"üïí –£–∞“õ—ã—Ç—ã/–í—Ä–µ–º—è: {row.get('–í—Ä–µ–º—è', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ ”®—Ç–∫—ñ–∑—ñ–ª—É –∫“Ø–Ω—ñ/–î–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π: {row.get('–î–Ω–∏ –∑–∞–Ω—è—Ç–∏–π', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üë®‚Äçüë¶ –ñ–∞—Å –∞—Ä–∞–ª—ã“ì—ã/–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {row.get('–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üë®‚Äçüè´ –ñ–∞—Ç—Ç—ã“õ—Ç—ã—Ä—É—à—ã/ –¢—Ä–µ–Ω–µ—Ä: {row.get('–¢—Ä–µ–Ω–µ—Ä', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            )

    await message.answer(schedule_text if schedule_text.strip() else "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_keyboard)
    await state.clear()

@dp.message(lambda message: message.text == "üìù –ó–∞–ø–∏—Å—å/–¢—ñ—Ä–∫–µ–ª—É")
async def start_registration(message: Message, state: FSMContext):
    await state.clear()
    lang = user_lang.get(message.from_user.id, "ru")
    await message.answer(
        "üìç –§–∏–ª–∏–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:" if lang == "kk" else "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=get_branches_keyboard()
    )
    await state.set_state(RegisterState.branch)

@dp.message(RegisterState.branch)
async def enter_branch(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")
    if message.text not in branches_list:
        await message.answer("‚ö†Ô∏è –¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑." if lang == "kk" else "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(branch=message.text)
    await message.answer(
        "üë§ –ë–∞–ª–∞–Ω—ã“£ –∞—Ç—ã-–∂”©–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" if lang == "kk" else "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞."
    )
    await state.set_state(RegisterState.name)

@dp.message(StateFilter(RegisterState.name))
async def enter_name(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")
    await state.update_data(name=message.text)
    await message.answer("üìÖ –¢—É“ì–∞–Ω –∂—ã–ª—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" if lang == "kk" else "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")
    await state.set_state(RegisterState.birth_year)

@dp.message(StateFilter(RegisterState.birth_year))
async def enter_birth_year(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (2009 <= int(message.text) <= 2020):
        await message.answer("‚ö†Ô∏è –ñ–∞—Å—ã“£—ã–∑–¥—ã –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã, 2015)." if user_lang.get(message.from_user.id, "ru") == "kk" else "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2015).")
        return
    await state.update_data(birth_year=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (WhatsApp):" if user_lang.get(message.from_user.id, "ru") == "kk" else "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (WhatsApp):")
    await state.set_state(RegisterState.phone)


import re  


@dp.message(StateFilter(RegisterState.phone))
async def enter_phone(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")

    phone = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    phone = phone.replace(" ", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –Ω–æ–º–µ—Ä–∞

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ +7
    if phone.startswith("8") and len(phone) == 11:
        phone = "+7" + phone[1:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer(
            "‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (+7XXXXXXXXXX –Ω–µ–º–µ—Å–µ 8XXXXXXXXXX)."
            if lang == "kk" else
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)."
        )
        return

    user_data = await state.get_data()
    sheet_clients.append_row([
        user_data.get('branch', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        user_data.get('birth_year', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        phone  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    ])

    await message.answer("‚úÖ –°—ñ–∑ —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£—ñ–∑! Whatsapp –∂–µ–ª—ñ—Å—ñ–Ω–¥–µ –º–µ–Ω–µ–¥–∂–µ—Ä–¥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∫“Ø—Ç—ñ“£—ñ–∑!" if user_lang.get(message.from_user.id, "ru") == "kk" else "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –í whatsapp –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!")
    await state.clear()
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_keyboard)
@dp.message(Command("cancel"))
async def cancel_registration(message: Message, state: FSMContext):
    await state.clear()
    lang = user_lang.get(message.from_user.id, "ru")
    await message.answer("üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞." if lang == "kk" else "üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /register")


@dp.message(lambda message: message.text == "‚ùì –ö”©–º–µ–∫/–ü–æ–º–æ—â—å")
async def help_request(message: Message, state: FSMContext):
    await state.clear()
    lang = user_lang.get(message.from_user.id, "ru")

    await message.answer(
        "üëã “ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω! –°—ñ–∑–≥–µ “õ–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–∑? \n\n"
        "”®—Ç—ñ–Ω—ñ—à, –º”ô—Å–µ–ª–µ“£—ñ–∑–¥—ñ “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑." if lang == "kk" else
        "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? \n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É."
    )

    await state.set_state(HelpState.issue)


@dp.message(StateFilter(HelpState.issue))
async def enter_issue(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")

    await state.update_data(issue=message.text)
    await message.answer(
        "üìû –ë–∞–π–ª–∞–Ω—ã—Å—É “Ø—à—ñ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" if lang == "kk" else
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

    await state.set_state(HelpState.phone)


@dp.message(StateFilter(HelpState.phone))
async def enter_help_phone(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")
    phone = message.text.strip().replace(" ", "")

    if phone.startswith("8") and len(phone) == 11:
        phone = "+7" + phone[1:]

    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer(
            "‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (+7XXXXXXXXXX –Ω–µ–º–µ—Å–µ 8XXXXXXXXXX)."
            if lang == "kk" else
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)."
        )
        return

    await state.update_data(phone=phone)
    await message.answer(
        "üë§ –ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" if lang == "kk" else
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

    await state.set_state(HelpState.name)


@dp.message(StateFilter(HelpState.name))
async def enter_help_name(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")

    user_data = await state.get_data()
    sheet_help.append_row([  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏—Å—Ç
        "–ü–æ–º–æ—â—å",  # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        user_data.get('issue', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        message.text  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ])

    await message.answer(
        "‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—ñ–∑–≥–µ –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ WhatsApp –∞—Ä“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞—Å–∞–¥—ã."
        if lang == "kk" else
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤ WhatsApp."
    )

    await state.clear()
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_keyboard)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())